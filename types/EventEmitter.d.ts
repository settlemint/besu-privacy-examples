/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type stored = ContractEventLog<{
  _to: string;
  _amount: string;
  0: string;
  1: string;
}>;

export interface EventEmitter extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): EventEmitter;
  clone(): EventEmitter;
  methods: {
    sender(): NonPayableTransactionObject<string>;

    store(_amount: number | string): NonPayableTransactionObject<void>;

    value(): NonPayableTransactionObject<string>;
  };
  events: {
    stored(cb?: Callback<stored>): EventEmitter;
    stored(options?: EventOptions, cb?: Callback<stored>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "stored", cb: Callback<stored>): void;
  once(event: "stored", options: EventOptions, cb: Callback<stored>): void;
}
